# This is the config file for the documentation generator.

split.item.toc = "20"
# too long entries in the table of contents wrap around
# after this number of characters

doc.section = """
<div class="section" id="$sectionID">
  <h1><a class="toc-backref" href="#$sectionID">$sectionTitle</a></h1>
  <dl class="item">
    $content
  </dl>
</div>
"""

# Just a single item in the TOC (e.g. imports, exports)
doc.section.toc_item = """
<li>
  <a class="reference reference-toplevel" href="#$sectionID" id="$sectionTitleID">$sectionTitle</a>
</li>
"""

# This is a section (e.g. procs, types) in the TOC which gets turned into a drop down
doc.section.toc = """
<li>
  <details open>
    <summary><a class="reference reference-toplevel" href="#$sectionID" id="$sectionTitleID">$sectionTitle</a></summary>
    <ul class="simple simple-toc-section">
      $content
    </ul>
  </details>
</li>
"""

doc.section.toc2 = """
<ul class="simple nested-toc-section">$plainName
  $content
</ul>
"""

# Chunk of HTML emitted for each entry in the HTML table of contents.
# Available variables are:
# * $desc: the actual docstring of the item.
# * $header: the full version of name, including types, pragmas, tags, etc.
# * $header_plain: like header but without HTML (and without pragmas, tags, etc.),
#   for attribute embedding.
# * $itemID: numerical unique entry of the item in the HTML.
# * $itemSym: short symbolic name of the item for easier hyperlinking.
# * $itemSymEnc: quoted version for URLs or attributes.
# * $itemSymOrID: the symbolic name or the ID if that is not unique.
# * $itemSymOrIDEnc: quoted version for URLs or attributes.
# * $name: reduced name of the item.
# * $uniqueName: name with parameters for routine types or $name for others.
# * $seeSrc: generated HTML from doc.item.seesrc (if some switches are used).

doc.item = """
<div id="$itemSymOrID">
  <dt><pre>$header</pre></dt>
  <dd>
    $deprecationMsg
    $desc
    $seeSrc
  </dd>
</div>
"""

# A wrapper of a few overloaded `doc.item`s with the same basic name
# * $header_plain - see above
# * $overloadGroupName - the anchor for this whole group
# * $content - string containing `doc.item`s themselves
doc.item2 = """
<div id="$overloadGroupName">
  $content
</div>
"""

# Chunk of HTML emitted for each entry in the HTML table of contents.
# See doc.item for available substitution variables.

# This is used for TOC items which are not overloadable (e.g. types).
# `$header_plain` would be too verbose here, so we use $name.
doc.item.toc = """
<li><a class="reference" href="#$itemSymOrIDEnc" title="$header_plain">$name</a></li>
"""

# This is used for TOC items which are grouped by the same name (e.g. procs).
doc.item.tocTable = """
<li><a class="reference" href="#$itemSymOrIDEnc" title="$header_plain">$header_plain</a></li>
"""

# HTML rendered for doc.item's seeSrc variable. Note that this will render to
# the empty string if you don't pass anything through --git.url. Available
# substitutaion variables here are:
# * $commit: branch/commit to use in source link.
# * $devel: branch to use in edit link.
# * $path: relative path to the file being processed.
# * $line: line of the item in the original source file.
# * $url: whatever you did pass through the --git.url switch (which also
#   gets variables path/line replaced!)
doc.item.seesrc = """
<a href="${url}/tree/${commit}/${path}#L${line}" class="link-seesrc" target="_blank">Source</a>&nbsp;&nbsp;
<a href="${url}/edit/${devel}/${path}#L${line}" class="link-seesrc" target="_blank" >Edit</a>&nbsp;&nbsp;
"""

doc.deprecationmsg = """
<div class="deprecation-message">
  <b>$label</b> $message
</div>
"""

doc.toc = """
<ul class="simple simple-toc" id="toc-list">
  $content
</ul>
"""

doc.body_toc_groupsection = """
<div class="search-groupby">
  Group by:
  <select onchange="groupBy(this.value)">
    <option value="section">Section</option>
    <option value="type">Type</option>
  </select>
</div>
"""

@if boot:
# This is enabled with the "boot" directive to generate
# the compiler documentation.
# As a user, tweak the block below instead.
# You can add your own global-links entries
doc.body_toc_group = """
<div class="row">
  <div class="three columns">
    <div class="theme-select-wrapper">
      <label for="theme-select">Theme:&nbsp;</label>
      <select id="theme-select" onchange="setTheme(this.value)">
        <option value="auto">🌗 Match OS</option>
        <option value="dark">🌑 Dark</option>
        <option value="light">🌕 Light</option>
      </select>
    </div>
    <div id="global-links">
      <ul class="simple-boot">
        <li><a href="manual.html">Manual</a></li>
        <li><a href="lib.html">Standard library</a></li>
        <li> <a id="indexLink" href="$theindexhref">Index</a></li>
        <li><a href="compiler/$theindexhref">Compiler docs</a></li>
        <li><a href="https://nim-lang.github.io/fusion/theindex.html">Fusion docs</a></li>
        <li><a href="https://nim-lang.github.io/Nim/">devel</a>, <a href="https://nim-lang.org/documentation.html">stable</a></li>
      </ul>
    </div>
    <div id="searchInputDiv">
      Search: <input type="search" id="searchInput"
        oninput="search()" />
    </div>
    $body_toc_groupsection
    $tableofcontents
  </div>
  <div class="nine columns" id="content">
    $seeSrc
    <div id="tocRoot"></div>
    $deprecationMsg
    <p class="module-desc">$moduledesc</p>
    $content
  </div>
</div>
"""

@else
# keep in sink with other `doc.body_toc_group` or better, refactor
doc.body_toc_group = """
<div class="row">
  <div class="three columns">
    <div class="theme-select-wrapper">
      <label for="theme-select">Theme:&nbsp;</label>
      <select id="theme-select" onchange="setTheme(this.value)">
        <option value="auto">🌗 Match OS</option>
        <option value="dark">🌑 Dark</option>
        <option value="light">🌕 Light</option>
      </select>
    </div>
    <div id="global-links">
      <ul class="simple">
        <li><a id="indexLink" href="$theindexhref">Index</a></li>
      </ul>
    </div>
    <div id="searchInputDiv">
      Search: <input type="search" id="searchInput" oninput="search()"/>
    </div>
    <div>
      Group by:
      <select onchange="groupBy(this.value)">
        <option value="section">Section</option>
        <option value="type">Type</option>
      </select>
    </div>
    $tableofcontents
  </div>
  <div class="nine columns" id="content">
    $seeSrc
    <div id="tocRoot"></div>
    $deprecationMsg
    <p class="module-desc">$moduledesc</p>
    $content
  </div>
</div>
"""
@end

doc.body_toc %= "${doc.body_toc_group}" # should only be used for boot

doc.body_no_toc = """
$moduledesc
$content
"""

# $1 - number of listing in document, $2 - language (e.g. langNim), $3 - anchor
doc.listing_start = "<pre$3 class=\"listing\">"
doc.listing_end = "</pre>"

# * $analytics: Google analytics location, includes <script> tags
doc.file = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nimony Manual</title>
    <link rel="stylesheet" type="text/css" href="${nimdoccss}">
    <style>
        /* Light theme color scheme (default) */
        :root {
            --bg-primary: #ffffff;      /* White background */
            --bg-secondary: #f8f9fa;    /* Light gray background */
            --third-background: #e8e8e8; /* Third level background */
            --text-primary: #2c3e50;    /* Dark blue-gray text */
            --text-secondary: #3498db;  /* Soft blue for highlights */
            --text-muted: #7f8c8d;      /* Muted gray for secondary text */
            --border-color: #ecf0f1;    /* Light gray border */
            --code-bg: #f8f9fa;         /* Light gray for code blocks */
            --code-border: #e9ecef;     /* Light gray for code borders */
            --accent-color: #e74c3c;    /* Soft red for accents */
            --string-color: #27ae60;    /* Green for strings */
            --keyword-color: #e74c3c;   /* Soft red for keywords */
            --comment-color: #95a5a6;   /* Muted gray for comments */
        }

        /* Dark theme color scheme */
        [data-theme="dark"] {
            --bg-primary: #002451;      /* Dark blue background */
            --bg-secondary: #00346e;    /* Slightly lighter blue */
            --third-background: transparent; /* Third level background */
            --text-primary: #ffffff;    /* White text */
            --text-secondary: #ffff00;  /* Yellow for captions and highlights */
            --text-muted: #b4b4b4;      /* Light gray for secondary text */
            --border-color: #1d3f53;    /* Darker blue border */
            --code-bg: #001b2b;         /* Darker blue for code blocks */
            --code-border: #1d3f53;     /* Darker blue for code borders */
            --accent-color: #ff9da4;    /* Soft red for accents */
            --string-color: #d1f1a9;    /* Light green for strings */
            --keyword-color: #ff9da4;   /* Soft red for keywords */
            --comment-color: #7285b7;   /* Muted blue for comments */
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.6;
            font-size: 16px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        header {
            background-color: var(--bg-secondary);
            border: 2px solid var(--border-color);
            padding: 20px;
            margin-bottom: 30px;
            text-align: center;
        }

        h1 {
            color: var(--text-secondary);
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }

        .subtitle {
            color: var(--text-muted);
            font-size: 1.2em;
            font-style: italic;
        }

        /* Navigation */
        nav {
            background-color: var(--bg-secondary);
            border: 2px solid var(--border-color);
            padding: 15px;
            margin-bottom: 30px;
        }

        /* Hierarchical Navigation */
        .nav-hierarchy {
            display: none;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .nav-hierarchy.active {
            display: grid;
        }

        .nav-section {
            background-color: var(--code-bg);
            border: 2px solid var(--code-border);
            padding: 15px;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        .nav-section:hover {
            border-color: var(--text-secondary);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .nav-section h3 {
            color: var(--text-secondary);
            margin-bottom: 10px;
            font-size: 1.1em;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 5px;
        }

        .nav-section ul {
            list-style: none;
            padding: 0;
        }

        .nav-section li {
            margin-bottom: 5px;
        }

        .nav-section a {
            color: var(--text-primary);
            text-decoration: none;
            padding: 3px 8px;
            border-radius: 3px;
            transition: all 0.2s ease;
            display: block;
        }

        .nav-section a:hover {
            background-color: var(--text-secondary);
            color: var(--bg-primary);
        }

        /* Global links styling */
        #global-links a {
            color: var(--text-secondary);
            text-decoration: none;
            transition: all 0.2s ease;
        }

        #global-links a:hover {
            color: var(--accent-color);
            text-decoration: underline;
        }

        /* Minimap button */
        .minimap-btn {
            background-color: var(--text-secondary);
            color: var(--bg-primary);
            border: 2px solid var(--text-secondary);
            padding: 10px 20px;
            font-weight: bold;
            cursor: pointer;
            border-radius: 5px;
            transition: all 0.3s ease;
            font-size: 1.1em;
        }

        .minimap-btn:hover {
            background-color: var(--bg-primary);
            color: var(--text-secondary);
        }

        .minimap-btn.expanded {
            background-color: var(--bg-primary);
            color: var(--text-secondary);
        }

        /* Main content */
        main {
            background-color: var(--bg-secondary);
            border: 2px solid var(--border-color);
            padding: 30px;
            margin-bottom: 30px;
        }

        h2 {
            color: var(--text-secondary);
            font-size: 1.8em;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--border-color);
        }

        h3 {
            color: var(--text-secondary);
            font-size: 1.4em;
            margin: 25px 0 15px 0;
        }

        p {
            margin-bottom: 15px;
            text-align: justify;
        }

        /* Code blocks */
        pre {
            background-color: var(--code-bg);
            border: 2px solid var(--code-border);
            padding: 20px;
            margin: 20px 0;
            overflow-x: auto;
            border-radius: 5px;
        }

        code {
            font-family: 'Courier New', 'Consolas', 'Monaco', monospace;
            background-color: var(--code-bg);
            color: var(--text-secondary);
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.9em;
        }

        pre code {
            background: none;
            padding: 0;
            color: var(--text-primary);
        }

        /* Inline code */
        .inline-code {
            background-color: var(--code-bg);
            color: var(--text-secondary);
            padding: 2px 6px;
            border-radius: 3px;
            font-family: 'Courier New', 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
        }

        /* Links */
        a {
            color: var(--text-secondary);
            text-decoration: none;
            transition: all 0.2s ease;
        }

        a:hover {
            color: var(--accent-color);
            text-decoration: underline;
        }

        a:visited {
            color: var(--text-secondary);
        }

        /* Lists */
        ul, ol {
            margin: 15px 0;
            padding-left: 30px;
        }

        li {
            margin-bottom: 8px;
        }

        /* Tables */
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            background-color: var(--code-bg);
            border: 2px solid var(--code-border);
        }

        th, td {
            padding: 12px;
            text-align: left;
            border: 1px solid var(--code-border);
        }

        th {
            background-color: var(--bg-secondary);
            color: var(--text-secondary);
            font-weight: bold;
        }

        /* Footer */
        footer {
            background-color: var(--bg-secondary);
            border: 2px solid var(--border-color);
            padding: 20px;
            text-align: center;
            color: var(--text-muted);
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .nav-hierarchy {
                grid-template-columns: 1fr;
                gap: 10px;
            }

            .nav-section {
                padding: 10px;
            }

            h1 {
                font-size: 2em;
            }

            main {
                padding: 20px;
            }
        }

        /* Scrollbar styling */
        ::-webkit-scrollbar {
            width: 12px;
        }

        ::-webkit-scrollbar-track {
            background: var(--bg-primary);
        }

        ::-webkit-scrollbar-thumb {
            background: var(--border-color);
            border-radius: 6px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--text-secondary);
        }

        /* Theme switcher button */
        .theme-switcher {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            background-color: var(--bg-secondary);
            border: 2px solid var(--border-color);
            color: var(--text-secondary);
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-family: 'Segoe UI', 'Tahoma', 'Arial', sans-serif;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .theme-switcher:hover {
            background-color: var(--text-secondary);
            color: var(--bg-primary);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        /* Responsive theme switcher */
        @media (max-width: 768px) {
            .theme-switcher {
                top: 10px;
                right: 10px;
                padding: 8px 12px;
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <button class="theme-switcher" onclick="toggleTheme()">🌙 Dark</button>

    <div class="container">
        <header>
            <h1>NIMONY MANUAL</h1>
            <p class="subtitle">The Complete Guide to the programming language</p>
        </header>

        <main>
      $content
        </main>

        <footer>
            <p>&copy; 2025 Andreas Rumpf. This manual is a work in progress.</p>
        </footer>
    </div>

    <script>
        // Theme switching functionality
        function toggleTheme() {
            const root = document.documentElement;
            const button = document.querySelector('.theme-switcher');

            if (root.getAttribute('data-theme') === 'dark') {
                // Switch to light theme
                root.removeAttribute('data-theme');
                button.textContent = '🌙 Dark';
                button.title = 'Switch to dark theme';
            } else {
                // Switch to dark theme
                root.setAttribute('data-theme', 'dark');
                button.textContent = '🌙 Light';
                button.title = 'Switch to light theme';
            }

            // Save preference to localStorage
            localStorage.setItem('nimony-theme', root.getAttribute('data-theme') || 'light');
        }

        // Navigation toggle functionality
        function toggleNavigation() {
            const hierarchy = document.getElementById('navHierarchy');
            const button = document.querySelector('.minimap-btn');

            if (hierarchy.classList.contains('active')) {
                hierarchy.classList.remove('active');
                button.textContent = '🗺️ Minimap';
                button.classList.remove('expanded');
            } else {
                hierarchy.classList.add('active');
                button.textContent = '🗺️ Hide Navigation';
                button.classList.add('expanded');
            }
        }

        // Load saved theme preference on page load
        document.addEventListener('DOMContentLoaded', function() {
            const savedTheme = localStorage.getItem('nimony-theme');
            const button = document.querySelector('.theme-switcher');

            if (savedTheme === 'dark') {
                document.documentElement.setAttribute('data-theme', 'dark');
                button.textContent = '🌙 Light';
                button.title = 'Switch to light theme';
            } else {
                button.textContent = '🌙 Dark';
                button.title = 'Switch to dark theme';
            }
        });
    </script>
</body>
</html>
"""
